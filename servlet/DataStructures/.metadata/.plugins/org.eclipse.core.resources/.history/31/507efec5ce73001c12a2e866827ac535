
public class CircularSinglyLinkedList {
	private ListNode last;
	private int length;
	private static class ListNode {
	private	ListNode next;
	private	int data ;
	
	public ListNode(int data) {
		this.data=data;
	}
	}
	public CircularSinglyLinkedList() {
		last=null;
		length=0;
	}
	public int length() {
		return length;
	}
	public void createCSLL() {
		ListNode first=new ListNode(2);
		ListNode second=new ListNode(4);
		ListNode third=new ListNode(5);
		ListNode fourth=new ListNode(7);
		first.next=second;
		second.next=third;
		third.next=fourth;
		fourth.next=first;
		   last=fourth;
	}
//..................................................................INSERT AT BEGINNING...................................
	public void insertBeg(int value) {
		ListNode newNode=new ListNode(value);
		//ListNode first=last.next;
		if(last==null) {
			last=newNode;
		}
		else {
		//	newNode.next=last.next;
			newNode.next=last.next;
		}
		last.next=newNode;
	}
	
//..................................................................DISPLAY...................................
	public void display() {
		if(last==null) {
			System.out.println("empty circularsingularlinkedlist");
		}
		else {
		ListNode first=last.next;
		ListNode current=first;
		while(last!=current) {
			System.out.print(current.data+"-->");

			current=current.next;

		}
		System.out.print(current.data+"-->");


		}
	}
	
	public static void main(String[] args) {
		CircularSinglyLinkedList cll=new CircularSinglyLinkedList();
		cll.createCSLL();
		cll.insertBeg(90);
		cll.display();
	}
	
}
